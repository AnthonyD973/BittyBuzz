# Test global variables
x = nil  # Test nil
x = 1    # Test int
x = 3.14 # Test float

# Test native closure
function add(a, b) {
    var c = a + b # Test local variables
    return c
}
# Test native closure call
y = add(42, 21)
print("y = ", y)

# Test lambda closure
lambda = function(a, b, c) {
    print(a, "; ", b, "; ", c)
}
# Test lambda closure call
lambda(-12, 2.91, nil)
lambda = nil

lambdaGen = function(c) {
    return function(a, b) {
        print(a, "; ", b, "; ", c)
    }
}
lambdaGen("c")("a", "b")

# Test string
textToLog = "Hello, world!"
# Test C closure call
print('Logging "', textToLog, '"')
textToLog = nil

# Test Comparisons
if (x > 3)
    print("x is too big")

if (x > 3)
    print("x is too big")
else if (x < 3)
    print("x is too small")
else
    print("maybe I just don't like x")

if ((x < 3) or (x > 3))
    print("x is not 3")
x = nil

# Test loop
z = 0
loc = function() {
  z = z + 1
  print(z)
}
while (z < 5)
   loc()

loc = nil
z = nil

# Test table
t = { .x=3 }
print("t = ", t)
print("t.x = ", t.x)       # dot syntax
print("t['x'] = ", t["x"]) # string syntax
t = nil

# Test : tables are always passed by reference
t1 = { .x=3 }
t2 = t1      # now t2 points to the contents of t1 -> no deep copy
t2.x = 5
print(t1.x)    # prints 5, not 3!
t1 = nil
t2 = nil